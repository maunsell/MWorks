# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.scheduler import Scheduler, Nightly, Triggerable

current_branch = 'trunk'
current_branch_name = current_branch
checkout_type = 'clobber'
#checkout_type = 'update'

c = BuildmasterConfig = {}
c['slaves'] = [BuildSlave("i386-OSX-10.5", "labuser"), BuildSlave("a64-debian", "labuser")]
c['slavePortnum'] = 9990

####### SCHEDULERS
nightly = Nightly(name="nightly", builderNames=["build all"], hour=[0], minute=[0], branch=None);

clean_monkeyworks = Triggerable(name="clean all", builderNames=["clean all"])
required_libs = Triggerable(name="req\'d libs", builderNames=["req\'d libs"])
scarab = Triggerable(name="scarab", builderNames=["scarab"])
experiment_xml = Triggerable(name="test XML", builderNames=["test XML"])
marionette_test_prep = Triggerable(name="test prep", builderNames=["test prep"])
editor = Triggerable(name="editor", builderNames=["editor"])
core = Triggerable(name="core", builderNames=["core"])
cppunit_core_tests = Triggerable(name="core unit tests", builderNames=["core unit tests"])
dlab_template_plugin = Triggerable(name="dlab template plugin", builderNames=["dlab template plugin"])
#jim1_plugin = Triggerable(name="jim1 plugin", builderNames=["jim1 plugin"])
movie_plugin = Triggerable(name="movie stimulus plugin", builderNames=["movie stimulus plugin"])
itc18_plugin = Triggerable(name="ITC18 plugin", builderNames=["ITC18 plugin"])
fake_monkey_plugin = Triggerable(name="Fake Monkey plugin", builderNames=["Fake Monkey plugin"])
hid_plugin = Triggerable(name="HID plugin", builderNames=["HID plugin"])
mssw_plugin = Triggerable(name="MSSW plugin", builderNames=["MSSW plugin"])
rectangle_plugin = Triggerable(name="rectangle stimulus plugin", builderNames=["rectangle stimulus plugin"])
circle_plugin = Triggerable(name="circle stimulus plugin", builderNames=["circle stimulus plugin"])
grating_plugin = Triggerable(name="drifting grating stimulus plugin", builderNames=["drifting grating stimulus plugin"])
marionette_tests1 = Triggerable(name="marionette 1 tests", builderNames=["marionette 1 tests"])
marionette_tests2 = Triggerable(name="marionette 2 tests", builderNames=["marionette 2 tests"])
cocoa = Triggerable(name="MW cocoa", builderNames=["MW cocoa"])
server = Triggerable(name="server", builderNames=["server"])
clean_client_plugins = Triggerable(name="clean client plugins", builderNames=["clean client plugins"])
client = Triggerable(name="client", builderNames=["client"])
variables_window = Triggerable(name="variables window", builderNames=["variables window"])
behavior_window = Triggerable(name="behavior window", builderNames=["behavior window"])
rat_behavior_window = Triggerable(name="rat behavior window", builderNames=["rat behavior window"])
template_window = Triggerable(name="template window", builderNames=["template window"])
calibrator_window = Triggerable(name="calibrator window", builderNames=["calibrator window"])
eye_window = Triggerable(name="eye window", builderNames=["eye window"])
MATLAB_window = Triggerable(name="MATLAB window", builderNames=["MATLAB window"])
reward_window = Triggerable(name="reward window", builderNames=["reward window"])
data_file_indexer = Triggerable(name="data file indexer", builderNames=["data file indexer"])
stream_utilities = Triggerable(name="stream utilities", builderNames=["stream utilities"])
data_file_reader = Triggerable(name="data file reader", builderNames=["data file reader"])
MATLAB_data_reader = Triggerable(name="MATLAB data reader", builderNames=["MATLAB data reader"])
installer = Triggerable(name="installer", builderNames=["installer"])
MATLAB_data_reader_linux = Triggerable(name="MATLAB data reader: linux", builderNames=["MATLAB data reader: linux"])


c['schedulers'] = [nightly,
                   clean_monkeyworks,
                   required_libs, 
                   editor,
                   scarab, 
                   marionette_test_prep, 
                   experiment_xml, 
                   core,
                   cppunit_core_tests,
                   dlab_template_plugin,
#                   jim1_plugin,
                   itc18_plugin,
                   fake_monkey_plugin,
                   hid_plugin,
                   mssw_plugin,
                   movie_plugin,
                   rectangle_plugin,
                   circle_plugin,
                   grating_plugin,
                   marionette_tests1,
                   marionette_tests2,
                   cocoa, 
                   server,
                   clean_client_plugins,
                   client,
                   variables_window,
                   behavior_window,
                   rat_behavior_window,
                   calibrator_window,
                   template_window,
                   eye_window,
                   MATLAB_window,
                   reward_window,
                   data_file_indexer,
                   stream_utilities,
                   data_file_reader,
                   MATLAB_data_reader,
                   installer,
                   MATLAB_data_reader_linux]

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps import source, shell
from buildbot.steps.trigger import Trigger
from buildbot.steps.python_twisted import Trial

build_all_factory = factory.BuildFactory()
build_all_factory.addStep(Trigger(schedulerNames=['clean all'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['req\'d libs'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['scarab'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['core'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['core unit tests'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['dlab template plugin',
#                                                  'jim1 plugin',
                                                  'ITC18 plugin',
                                                  'Fake Monkey plugin',
                                                  'HID plugin',
                                                  'MSSW plugin',
                                                  'movie stimulus plugin', 
                                                  'rectangle stimulus plugin', 
                                                  'circle stimulus plugin',
                                                  'drifting grating stimulus plugin'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['test XML',
                                                  'test prep'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['marionette 1 tests'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['marionette 2 tests'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['MW cocoa'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['server'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['data file indexer',
                                                  'data file reader'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['stream utilities'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['MATLAB data reader',
                                                  'MATLAB data reader: linux'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['clean client plugins'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['client'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['template window', 
                                                  'reward window', 
                                                  'MATLAB window',
                                                  'eye window', 
                                                  'calibrator window',
                                                  'variables window', 
                                                  'rat behavior window', 
                                                  'behavior window'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['editor'], waitForFinish=True, updateSourceStamp=False))
build_all_factory.addStep(Trigger(schedulerNames=['installer'], waitForFinish=True, updateSourceStamp=False))

build_all_builder = {'name': "build all",
      'slavename': "i386-OSX-10.5",
      'builddir': "build all",
      'factory': build_all_factory,
      }


clean_monkeyworks_factory = factory.BuildFactory();
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "MonkeyWorks"],
                                                     descriptionDone=["cleaned", "MonkeyWorks"],
                                                     command=["chmod", "-R", "777", "/Library/MonkeyWorks/"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "MonkeyWorks"],
                                                     descriptionDone=["cleaned", "MonkeyWorks"],
                                                     command=["rm", "-rf", "/Library/MonkeyWorks/"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Core"],
                                                     descriptionDone=["cleaned", "Core"],
                                                     command=["chmod", "-R", "777", "/Library/Frameworks/MonkeyWorksCore.framework"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Core"],
                                                     descriptionDone=["cleaned", "Core"],
                                                     command=["rm", "-rf", "/Library/Frameworks/MonkeyWorksCore.framework"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "MW", "Cocoa"],
                                                     descriptionDone=["cleaned", "MW", "Cocoa"],
                                                     command=["chmod", "-R", "777", "/Library/Frameworks/MonkeyWorksCocoa.framework"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "MW", "Cocoa"],
                                                     descriptionDone=["cleaned", "MW", "Cocoa"],
                                                     command=["rm", "-rf", "/Library/Frameworks/MonkeyWorksCocoa.framework"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Client"],
                                                     descriptionDone=["cleaned", "Client"],
                                                     command=["chmod", "-R", "777", "/Library/Application Support/NewClient"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Client"],
                                                     descriptionDone=["cleaned", "Client"],
                                                     command=["rm", "-rf", "/Library/Application Support/NewClient"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Client"],
                                                     descriptionDone=["cleaned", "Client"],
                                                     command=["chmod", "-R", "777", "/Applications/MWClient.app"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Client"],
                                                     descriptionDone=["cleaned", "Client"],
                                                     command=["rm", "-rf", "/Applications/MWClient.app"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Server"],
                                                     descriptionDone=["cleaned", "Server"],
                                                     command=["chmod", "-R", "777", "/Applications/MWServer.app"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Server"],
                                                     descriptionDone=["cleaned", "Server"],
                                                     command=["rm", "-rf", "/Applications/MWServer.app"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Editor"],
                                                     descriptionDone=["cleaned", "Editor"],
                                                     command=["chmod", "-R", "777", "/Applications/MWEditor.app"]))
clean_monkeyworks_factory.addStep(shell.ShellCommand(description=["cleaning", "Editor"],
                                                     descriptionDone=["cleaned", "Editor"],
                                                     command=["rm", "-rf", "/Applications/MWEditor.app"]))

clean_monkeyworks_builder = {'name': "clean all",
                  'slavename': "i386-OSX-10.5",
                  'builddir': "clean_all",
                  'factory': clean_monkeyworks_factory,
                  }

editor_factory = factory.BuildFactory();
editor_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/COXLAB/NewEditor", 
                                  mode=checkout_type))
editor_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"], 
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
editor_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-nodistribute", "-target", "NewEditor", "-configuration", "Release"],
                                          descriptionDone=["built"],
                                          description=["building"]))

editor_builder = {'name': "editor",
                  'slavename': "i386-OSX-10.5",
                  'builddir': "Editor",
                  'factory': editor_factory,
                  }

required_libs_factory = factory.BuildFactory()
required_libs_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/" + current_branch_name + "/MonkeyWorksMacRequirements", 
                                         mode=checkout_type))
required_libs_factory.addStep(shell.ShellCommand(command=["make", "clean"]))
required_libs_factory.addStep(shell.ShellCommand(command=["make", "all"]))

required_libs_builder = {'name': "req\'d libs",
                          'slavename': "i386-OSX-10.5",
                          'builddir': "Required_Libraries",
                          'factory': required_libs_factory,
                          }

experiment_xml_factory = factory.BuildFactory()
experiment_xml_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/" + current_branch_name + "/MonkeyWorksExperimentXML", 
                                          mode=checkout_type))
experiment_xml_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallExperiments", "-configuration", "Release"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
experiment_xml_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "InstallTests", "-configuration", "Release"],
                                          descriptionDone=["copied"],
                                          description=["copying"]))

experiment_xml_builder = {'name': "test XML",
                          'slavename': "i386-OSX-10.5",
                          'builddir': "Test_XML",
                          'factory': experiment_xml_factory,
                          }

marionette_test_prep_factory = factory.BuildFactory()
marionette_test_prep_factory.addStep(shell.ShellCommand(command=["rm", "-f", "/Library/MonkeyWorks/local/setup_variables.xml"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
marionette_test_prep_factory.addStep(shell.ShellCommand(command=["cp", "/Library/MonkeyWorks/ExampleSetupVariables/Macbook/setup_variables.xml", "/Library/MonkeyWorks/local/setup_variables.xml"],
                                          descriptionDone=["copied"],
                                          description=["copying"]))

marionette_test_prep_builder = {'name': "test prep",
                          'slavename': "i386-OSX-10.5",
                          'builddir': "test_prep",
                          'factory': marionette_test_prep_factory,
                          }

scarab_factory = factory.BuildFactory()
scarab_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/" + current_branch_name + "/Scarab", 
                                  mode=checkout_type))
scarab_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Development"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
scarab_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "ScarabUninstall", "-configuration", "Development"],
                                          descriptionDone=["uninstalled"],
                                          description=["unintalling"]))
scarab_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "libscarab.a", "-configuration", "Development"],
                                          descriptionDone=["built"],
                                          description=["building"]))


scarab_builder = {'name': "scarab",
                  'slavename': "i386-OSX-10.5",
                  'builddir': "Scarab",
                  'factory': scarab_factory,
                  }

core_factory = factory.BuildFactory();
core_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksCore", 
                                    mode=checkout_type))
core_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Development"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
core_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "CoreUninstall", "-configuration", "Development"],
                                          descriptionDone=["uninstalled"],
                                          description=["uninstalling"]))
core_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "Everything", "-configuration", "Development"],
                                          descriptionDone=["built"],
                                          description=["building"]))

core_builder = {'name': "core",
      'slavename': "i386-OSX-10.5",
      'builddir': "Core",
      'factory': core_factory,
      }

cppunit_tests_factory = factory.BuildFactory()
cppunit_tests_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MonkeyWorksCoreTestRunner"],
                                                 descriptionDone=["finish"],
                                                 description=["running"]))


cppunit_test_builder = {'name': "core unit tests",
      'slavename': "i386-OSX-10.5",
      'builddir': "Core_Unit_Tests",
      'factory': cppunit_tests_factory,
      }

hid_factory = factory.BuildFactory();
hid_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/HIDPlugin", 
                                    mode=checkout_type))
hid_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
hid_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
hid_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallHIDPlugin", "-configuration", "Debug"],
                                          descriptionDone=["uninstalled"],
                                          description=["uninstalling"]))
hid_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "HIDPlugin", "-configuration", "Debug"],
                                          descriptionDone=["built"],
                                          description=["building"]))


hid_builder = {'name': "HID plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "HID_plugin",
      'factory': hid_factory,
      }

mssw_factory = factory.BuildFactory();
mssw_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/SidewinderPlugAndPlayGamepadPlugin", 
                                    mode=checkout_type))
mssw_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
mssw_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
mssw_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallMSSWGamepadPlugin", "-configuration", "Debug"],
                                          descriptionDone=["uninstalled"],
                                          description=["uninstalling"]))
mssw_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MSSWGamepadPlugin", "-configuration", "Debug"],
                                          descriptionDone=["built"],
                                          description=["building"]))


mssw_builder = {'name': "MSSW plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "MSSW_plugin",
      'factory': mssw_factory,
      }

itc18_factory = factory.BuildFactory();
itc18_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/ITC18Plugin", 
                                    mode=checkout_type))
itc18_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
itc18_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
itc18_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallITC18Plugin", "-configuration", "Debug"],
                                          descriptionDone=["uninstalled"],
                                          description=["uninstalling"]))
itc18_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "ITC18Plugin", "-configuration", "Debug"],
                                          descriptionDone=["built"],
                                          description=["building"]))


itc18_builder = {'name': "ITC18 plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "ITC18_plugin",
      'factory': itc18_factory,
      }

fake_monkey_factory = factory.BuildFactory();
fake_monkey_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/FakeMonkeyPlugin", 
                                    mode=checkout_type))
fake_monkey_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
fake_monkey_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"],
                                          descriptionDone=["cleaned"],
                                          description=["cleaning"]))
fake_monkey_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallFakeMonkeyPlugin", "-configuration", "Debug"],
                                          descriptionDone=["uninstalled"],
                                          description=["uninstalling"]))
fake_monkey_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "FakeMonkeyPlugin", "-configuration", "Debug"],
                                          descriptionDone=["built"],
                                          description=["building"]))


fake_monkey_builder = {'name': "Fake Monkey plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "Fake_Monkey_plugin",
      'factory': fake_monkey_factory,
      }

dlab_template_factory = factory.BuildFactory();
dlab_template_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/DLabTemplatePlugin", 
                                    mode=checkout_type))
dlab_template_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
dlab_template_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
dlab_template_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallDLabTemplatePlugin", "-configuration", "Debug"]))
dlab_template_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "DLabTemplatePlugin", "-configuration", "Debug"]))

dlab_template_builder = {'name': "dlab template plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "Dlab_Template_plugin",
      'factory': dlab_template_factory,
      }

#jim1_factory = factory.BuildFactory();
#jim1_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/Jim1Plugin", mode=checkout_type))
#jim1_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
#jim1_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
#jim1_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallJim1Plugin", "-configuration", "Debug"]))
#jim1_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "Jim1Plugin", "-configuration", "Debug"]))
#
#jim1_builder = {'name': "jim1 plugin",
#      'slavename': "i386-OSX-10.5",
#      'builddir': "jim1_plugin",
#      'factory': jim1_factory,
#      }

movie_stimulus_factory = factory.BuildFactory();
movie_stimulus_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/MoviePlugin", 
                                    mode=checkout_type))
movie_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
movie_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
movie_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallMovieStimulusPlugin", "-configuration", "Debug"]))
movie_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MovieStimulusPlugin", "-configuration", "Debug"]))

movie_stimulus_builder = {'name': "movie stimulus plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "Movie_Stimulus_plugin",
      'factory': movie_stimulus_factory,
      }

rectangle_stimulus_factory = factory.BuildFactory();
rectangle_stimulus_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/RectangleStimulus", 
                                    mode=checkout_type))
rectangle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
rectangle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
rectangle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallRectangleStimulusPlugin", "-configuration", "Debug"]))
rectangle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "RectangleStimulusPlugin", "-configuration", "Debug"]))

rectangle_stimulus_builder = {'name': "rectangle stimulus plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "Rectangle_Stimulus_plugin",
      'factory': rectangle_stimulus_factory,
      }

circle_stimulus_factory = factory.BuildFactory();
circle_stimulus_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/CircleStimulus", 
                                    mode=checkout_type))
circle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
circle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
circle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallCircleStimulusPlugin", "-configuration", "Debug"]))
circle_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "CircleStimulusPlugin", "-configuration", "Debug"]))

circle_stimulus_builder = {'name': "circle stimulus plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "Circle_Stimulus_plugin",
      'factory': circle_stimulus_factory,
      }

drifting_grating_stimulus_factory = factory.BuildFactory();
drifting_grating_stimulus_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabPlugins/DriftingGratingStimulus", 
                                    mode=checkout_type))
drifting_grating_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
drifting_grating_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
drifting_grating_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallDriftingGratingStimulusPlugin", "-configuration", "Debug"]))
drifting_grating_stimulus_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "DriftingGratingStimulusPlugin", "-configuration", "Debug"]))

drifting_grating_stimulus_builder = {'name': "drifting grating stimulus plugin",
      'slavename': "i386-OSX-10.5",
      'builddir': "Drifting_Grating_Stimulus_plugin",
      'factory': drifting_grating_stimulus_factory,
      }

marionette_tests_1_factory = factory.BuildFactory()
marionette_tests_2_factory = factory.BuildFactory()

## PUT MARIONETTE test info here
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/ITCFilterLagTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/ITCFilterLagTest", "completed"],
                                                      description=["ABatteryOfBasicTests/ITCFilterLagTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/ITCTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/ITCTest", "completed"],
                                                      description=["ABatteryOfBasicTests/ITCTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/ImageLoadExperiment/ImageLoad.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/ImageLoadExperiment/ImageLoad", "completed"],
                                                      description=["ABatteryOfBasicTests/ImageLoadExperiment/ImageLoad", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/ImageLoadRepIndex/Rep.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/ImageLoadRepIndex/Rep", "completed"],
                                                      description=["ABatteryOfBasicTests/ImageLoadRepIndex/Rep", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/ImageLoadRepIndex/noRep.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/ImageLoadRepIndex/noRep", "completed"],
                                                      description=["ABatteryOfBasicTests/ImageLoadRepIndex/noRep", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/NuosSpikeWindowTest/NuosSpikeWindowTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/NuosSpikeWindowTest/NuosSpikeWindowTest", "completed"],
                                                      description=["ABatteryOfBasicTests/NuosSpikeWindowTest/NuosSpikeWindowTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/QueueLiveQueue/QueueLiveQueue.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/QueueLiveQueue/QueueLiveQueue", "completed"],
                                                      description=["ABatteryOfBasicTests/QueueLiveQueue/QueueLiveQueue", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/RSVPTiming/RSVPTiming.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/RSVPTiming/RSVPTiming", "completed"],
                                                      description=["ABatteryOfBasicTests/RSVPTiming/RSVPTiming", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/SelectionTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/SelectionTest", "completed"],
                                                      description=["ABatteryOfBasicTests/SelectionTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/SelectionTestSimple.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/SelectionTestSimple", "completed"],
                                                      description=["ABatteryOfBasicTests/SelectionTestSimple", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/StimBringToFront/bringToFront.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/StimBringToFront/bringToFront", "completed"],
                                                      description=["ABatteryOfBasicTests/StimBringToFront/bringToFront", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/StimulusGroupDemo.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/StimulusGroupDemo", "completed"],
                                                      description=["ABatteryOfBasicTests/StimulusGroupDemo", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/Stimulus_Size_Test/Stimulus_Size_Test.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/Stimulus_Size_Test/Stimulus_Size_Test", "completed"],
                                                      description=["ABatteryOfBasicTests/Stimulus_Size_Test/Stimulus_Size_Test", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ABatteryOfBasicTests/StmTimingTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ABatteryOfBasicTests/StmTimingTest", "completed"],
                                                      description=["ABatteryOfBasicTests/StmTimingTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/AssertTests/AssertTest.xml",
                                                               "/Library/MonkeyWorks/tests/XML/AssertTests/AssertTest.TESTDATA.xml"],
                                                      descriptionDone=["AssertTests/AssertTest", "completed"],
                                                      description=["AssertTests/AssertTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/BasicStateTest/BasicStateTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["BasicStateTest/BasicStateTest", "completed"],
                                                      description=["BasicStateTest/BasicStateTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/BasicTimerTest/BasicTimerTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["BasicTimerTest/BasicTimerTest", "completed"],
                                                      description=["BasicTimerTest/BasicTimerTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/CurrentTimeTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["CurrentTimeTest", "completed"],
                                                      description=["CurrentTimeTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/EventStartStop/EventStartStop.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["EventStartStop/EventStartStop", "completed"],
                                                      description=["EventStartStop/EventStartStop", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/ExpressionVariableTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/ExpressionVariableTest", "completed"],
                                                      description=["ExpressionVariableTests/ExpressionVariableTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_2.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_2", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_2", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_3.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_3", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_3", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_4.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_4", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_4", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_5.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_5", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_5", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_6.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_6", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_6", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_7.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_7", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_7", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ExpressionVariableTests/SimpleExpressionVariableTest_8.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ExpressionVariableTests/SimpleExpressionVariableTest_8", "completed"],
                                                      description=["ExpressionVariableTests/SimpleExpressionVariableTest_8", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/BasicFakeMonkeyTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FakeMonkeyTests/BasicFakeMonkeyTest", "completed"],
                                                      description=["FakeMonkeyTests/BasicFakeMonkeyTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/Calibration_FakeMonkeyOnly.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FakeMonkeyTests/Calibration_FakeMonkeyOnly", "completed"],
                                                      description=["FakeMonkeyTests/Calibration_FakeMonkeyOnly", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/Calibration_FakeMonkeyOnly_LongFixation.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FakeMonkeyTests/Calibration_FakeMonkeyOnly_LongFixation", "completed"],
                                                      description=["FakeMonkeyTests/Calibration_FakeMonkeyOnly_LongFixation", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/Calibration_FakeMonkey_SaccadeAndFixate.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FakeMonkeyTests/Calibration_FakeMonkey_SaccadeAndFixate", "completed"],
                                                      description=["FakeMonkeyTests/Calibration_FakeMonkey_SaccadeAndFixate", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/FakeMonkeyJuice.xml",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/FakeMonkeyJuice.TESTDATA.xml"],
                                                      descriptionDone=["FakeMonkeyTests/FakeMonkeyJuice", "completed"],
                                                      description=["FakeMonkeyTests/FakeMonkeyJuice", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FixationPointTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FixationPointTest", "completed"],
                                                      description=["FixationPointTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FunctionVariableTests/DiscRand.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FunctionVariableTests/DiscRand", "completed"],
                                                      description=["FunctionVariableTests/DiscRand", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FunctionVariableTests/Rand.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FunctionVariableTests/Rand", "completed"],
                                                      description=["FunctionVariableTests/Rand", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/IfActionTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["IfActionTest", "completed"],
                                                      description=["IfActionTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ImageReplicatorTest/TripleImageReplicatorList.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ImageReplicatorTest/TripleImageReplicatorList", "completed"],
                                                      description=["ImageReplicatorTest/TripleImageReplicatorList", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ImageReplicatorTest/TripleImageReplicatorRange.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ImageReplicatorTest/TripleImageReplicatorRange", "completed"],
                                                      description=["ImageReplicatorTest/TripleImageReplicatorRange", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/LocalVarTests/LocalVarTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["LocalVarTests/LocalVarTest", "completed"],
                                                      description=["LocalVarTests/LocalVarTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/LocalVarTests/LocalVarTest_2.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["LocalVarTests/LocalVarTest_2", "completed"],
                                                      description=["LocalVarTests/LocalVarTest_2", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/LocalVarTests/LocalVarTest_3.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["LocalVarTests/LocalVarTest_3", "completed"],
                                                      description=["LocalVarTests/LocalVarTest_3", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/LotsOfAssignsTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["LotsOfAssignsTest", "completed"],
                                                      description=["LotsOfAssignsTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MegaDataTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MegaDataTest", "completed"],
                                                      description=["MegaDataTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/Metronome/_Metronome_ITC18.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["Metronome/_Metronome_ITC18", "completed"],
                                                      description=["Metronome/_Metronome_ITC18", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTest", "completed"],
                                                      description=["MovieTests/MovieTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestDequeueInMiddle.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestDequeueInMiddle", "completed"],
                                                      description=["MovieTests/MovieTestDequeueInMiddle", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestDequeueThenRequeue.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestDequeueThenRequeue", "completed"],
                                                      description=["MovieTests/MovieTestDequeueThenRequeue", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestToFast.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestToFast", "completed"],
                                                      description=["MovieTests/MovieTestToFast", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestToSlow.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestToSlow", "completed"],
                                                      description=["MovieTests/MovieTestToSlow", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestWayToFast.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestWayToFast", "completed"],
                                                      description=["MovieTests/MovieTestWayToFast", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestWithExtraUSD.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestWithExtraUSD", "completed"],
                                                      description=["MovieTests/MovieTestWithExtraUSD", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestWithStopAndRewind.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestWithStopAndRewind", "completed"],
                                                      description=["MovieTests/MovieTestWithStopAndRewind", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MovieTests/MovieTestWithfixationDot.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MovieTests/MovieTestWithfixationDot", "completed"],
                                                      description=["MovieTests/MovieTestWithfixationDot", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MultiProtocolTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MultiProtocolTest", "completed"],
                                                      description=["MultiProtocolTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameRandomWithReplacementSelection.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameRandomWithReplacementSelection", "completed"],
                                                      description=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameRandomWithReplacementSelection", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameRandomWithoutReplacementSelection.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameRandomWithoutReplacementSelection", "completed"],
                                                      description=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameRandomWithoutReplacementSelection", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameSequentialDescendingSelection.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameSequentialDescendingSelection", "completed"],
                                                      description=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameSequentialDescendingSelection", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameSequentialSelection.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameSequentialSelection", "completed"],
                                                      description=["MultipleSameNameTaskSystems/TwoProtocolsWithTaskSystemsWithTheSameNameSequentialSelection", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/NestedIfTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["NestedIfTest", "completed"],
                                                      description=["NestedIfTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/RangeReplicatorInitStateSystem/RangeReplicatorInitStateSystem.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["RangeReplicatorInitStateSystem/RangeReplicatorInitStateSystem", "completed"],
                                                      description=["RangeReplicatorInitStateSystem/RangeReplicatorInitStateSystem", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/RefreshTest/refresh_test.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["RefreshTest/refresh_test", "completed"],
                                                      description=["RefreshTest/refresh_test", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ScheduledActionTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ScheduledActionTest", "completed"],
                                                      description=["ScheduledActionTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionDemo/SelectionDemo.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionDemo/SelectionDemo", "completed"],
                                                      description=["SelectionDemo/SelectionDemo", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/RandomWORSelectionOverEdge.xml",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/RandomWORSelectionOverEdge.TESTDATA.xml"],
                                                      descriptionDone=["SelectionTests/RandomWORSelectionOverEdge", "completed"],
                                                      description=["SelectionTests/RandomWORSelectionOverEdge", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/RandomWithReplacementSelectionOverEdge.xml",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/RandomWithReplacementSelectionOverEdge.TESTDATA.xml"],
                                                      descriptionDone=["SelectionTests/RandomWithReplacementSelectionOverEdge", "completed"],
                                                      description=["SelectionTests/RandomWithReplacementSelectionOverEdge", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_01.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_01", "completed"],
                                                      description=["SelectionTests/SelectionTest_01", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_02.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_02", "completed"],
                                                      description=["SelectionTests/SelectionTest_02", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_03.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_03", "completed"],
                                                      description=["SelectionTests/SelectionTest_03", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_04.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_04", "completed"],
                                                      description=["SelectionTests/SelectionTest_04", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_05.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_05", "completed"],
                                                      description=["SelectionTests/SelectionTest_05", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_06.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_06", "completed"],
                                                      description=["SelectionTests/SelectionTest_06", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_07.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_07", "completed"],
                                                      description=["SelectionTests/SelectionTest_07", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_08.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_08", "completed"],
                                                      description=["SelectionTests/SelectionTest_08", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_09.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_09", "completed"],
                                                      description=["SelectionTests/SelectionTest_09", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_10.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_10", "completed"],
                                                      description=["SelectionTests/SelectionTest_10", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SelectionTest_11.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SelectionTests/SelectionTest_11", "completed"],
                                                      description=["SelectionTests/SelectionTest_11", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SequentialDescendingSelectionOverEdge.xml",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SequentialDescendingSelectionOverEdge.TESTDATA.xml"],
                                                      descriptionDone=["SelectionTests/SequentialDescendingSelectionOverEdge", "completed"],
                                                      description=["SelectionTests/SequentialDescendingSelectionOverEdge", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SequentialSelectionOverEdge.xml",
                                                               "/Library/MonkeyWorks/tests/XML/SelectionTests/SequentialSelectionOverEdge.TESTDATA.xml"],
                                                      descriptionDone=["SelectionTests/SequentialSelectionOverEdge", "completed"],
                                                      description=["SelectionTests/SequentialSelectionOverEdge", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ShapeTests/RectangleCircleTest.xml",
                                                               "/Library/MonkeyWorks/tests/XML/ShapeTests/RectangleCircleTest.TESTDATA.xml"],
                                                      descriptionDone=["ShapeTests/RectangleCircleTest", "completed"],
                                                      description=["ShapeTests/RectangleCircleTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/ShowStimulus/ShowStimulus.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["ShowStimulus/ShowStimulus", "completed"],
                                                      description=["ShowStimulus/ShowStimulus", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SingleFixationDot.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SingleFixationDot", "completed"],
                                                      description=["SingleFixationDot", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/Sound/Woof.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["Sound/Woof", "completed"],
                                                      description=["Sound/Woof", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/SpringLoadedActionTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["SpringLoadedActionTest", "completed"],
                                                      description=["SpringLoadedActionTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StateReplicatorTest/stateReplicatorTestList.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StateReplicatorTest/stateReplicatorTestList", "completed"],
                                                      description=["StateReplicatorTest/stateReplicatorTestList", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StateReplicatorTest/stateReplicatorTestList2.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StateReplicatorTest/stateReplicatorTestList2", "completed"],
                                                      description=["StateReplicatorTest/stateReplicatorTestList2", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StateReplicatorTest/stateReplicatorTestRange.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StateReplicatorTest/stateReplicatorTestRange", "completed"],
                                                      description=["StateReplicatorTest/stateReplicatorTestRange", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimTimingTestWithoutStim.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimTimingTestWithoutStim", "completed"],
                                                      description=["StimTimingTestWithoutStim", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/IndexOutOfRangeTest.xml",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/IndexOutOfRangeTest.TESTDATA.xml"],
                                                      descriptionDone=["StimulusGroupTests/IndexOutOfRangeTest", "completed"],
                                                      description=["StimulusGroupTests/IndexOutOfRangeTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest10.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest10", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest10", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest11.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest11", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest11", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest2.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest2", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest2", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest3.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest3", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest3", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest4.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest4", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest4", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest5.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest5", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest5", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest6.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest6", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest6", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest7.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest7", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest7", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest8.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest8", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest8", "running"]))
marionette_tests_1_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/MultiDimensionalStimuliTest9.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/MultiDimensionalStimuliTest9", "completed"],
                                                      description=["StimulusGroupTests/MultiDimensionalStimuliTest9", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/FakeMonkeyTests/Calibration_FakeMonkeyLinearCalibratorOnly.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["FakeMonkeyTests/Calibration_FakeMonkeyLinearCalibratorOnly", "completed"],
                                                      description=["FakeMonkeyTests/Calibration_FakeMonkeyLinearCalibratorOnly", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusGroupTests/StimulusGroupTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["StimulusGroupTests/StimulusGroupTest", "completed"],
                                                      description=["StimulusGroupTests/StimulusGroupTest", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusPresentTests/StimulusPresentTest.xml",
                                                               "/Library/MonkeyWorks/tests/XML/StimulusPresentTests/StimulusPresentTest.TESTDATA.xml"],
                                                      descriptionDone=["StimulusPresentTests/StimulusPresentTest", "completed"],
                                                      description=["StimulusPresentTests/StimulusPresentTest", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/TimerAsVarTests/TimerExpiredTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["TimerAsVarTests/TimerExpiredTest", "completed"],
                                                      description=["TimerAsVarTests/TimerExpiredTest", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/TimerAsVarTests/TimerExpiredTest2.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["TimerAsVarTests/TimerExpiredTest2", "completed"],
                                                      description=["TimerAsVarTests/TimerExpiredTest2", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/TimerAsVarTests/TimerExpiredTest3.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["TimerAsVarTests/TimerExpiredTest3", "completed"],
                                                      description=["TimerAsVarTests/TimerExpiredTest3", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/TimerAsVarTests/TimerExpiredTest4.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["TimerAsVarTests/TimerExpiredTest4", "completed"],
                                                      description=["TimerAsVarTests/TimerExpiredTest4", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/VariableGroupTest.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["VariableGroupTest", "completed"],
                                                      description=["VariableGroupTest", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_Direct_control_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_Direct_control_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_Direct_control_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_Pulse_high_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_Pulse_high_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_Pulse_high_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_Pulse_low_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_Pulse_low_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_Pulse_low_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_edge_any_test.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_edge_any_test", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_edge_any_test", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_high_to_low_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_high_to_low_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_high_to_low_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_input_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_input_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_input_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_TTL_low_to_high_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_TTL_low_to_high_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_TTL_low_to_high_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/simple_ITC_examples/ITC_analog_input_example.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["simple_ITC_examples/ITC_analog_input_example", "completed"],
                                                      description=["simple_ITC_examples/ITC_analog_input_example", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestEllipse.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestEllipse", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestEllipse", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestGaussian.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestGaussian", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestGaussian", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestRectangle.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestRectangle", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestRectangle", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestSawtooth.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestSawtooth", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestSawtooth", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestSawtoothInverse.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestSawtoothInverse", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestSawtoothInverse", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestSinusoid.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestSinusoid", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestSinusoid", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestSquare.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestSquare", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestSquare", "running"]))
marionette_tests_2_factory.addStep(shell.ShellCommand(command=["/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/MacOS/MarionetteTest",
                                                               "/Library/MonkeyWorks/tests/XML/DynamicStimuliTests/DriftingGratingTestTriangle.xml",
                                                               "/Library/MonkeyWorks/tests/MarionetteTest.app/Contents/Resources/default_test_data.xml"],
                                                      descriptionDone=["DynamicStimuliTests/DriftingGratingTestTriangle", "completed"],
                                                      description=["DynamicStimuliTests/DriftingGratingTestTriangle", "running"]))


marionette_tests_1_builder = {'name': "marionette 1 tests",
      'slavename': "i386-OSX-10.5",
      'builddir': "Marionette_1_Tests",
      'factory': marionette_tests_1_factory,
      }
marionette_tests_2_builder = {'name': "marionette 2 tests",
      'slavename': "i386-OSX-10.5",
      'builddir': "Marionette2_Tests",
      'factory': marionette_tests_2_factory,
      }

cocoa_factory = factory.BuildFactory();
cocoa_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksCocoa", 
                                    mode=checkout_type))
cocoa_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Development"]))
cocoa_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallMWCocoa", "-configuration", "Development"]))
cocoa_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksCocoa", "-configuration", "Development"]))

cocoa_builder = {'name': "MW cocoa",
      'slavename': "i386-OSX-10.5",
      'builddir': "MW_Cocoa",
      'factory': cocoa_factory,
      }

server_factory = factory.BuildFactory();
server_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksServer", 
                                    mode=checkout_type))
server_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Development"]))
server_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallServer", "-configuration", "Development"]))
server_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksServer", "-configuration", "Development"]))

server_builder = {'name': "server",
      'slavename': "i386-OSX-10.5",
      'builddir': "Server",
      'factory': server_factory,
      }

client_factory = factory.BuildFactory();
client_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/COXLAB/NewClient", 
                                  mode=checkout_type))
client_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
client_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
client_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MWClient", "-configuration", "Debug"]))

client_builder = {'name': "client",
      'slavename': "i386-OSX-10.5",
      'builddir': "Client",
      'factory': client_factory,
      }


clean_client_plugins_factory = factory.BuildFactory();
clean_client_plugins_factory.addStep(shell.ShellCommand(command=["rm", "-rf", "/Library/Application Support/NewClient/Plugins/*.bundle"]))

clean_client_plugins_builder = {'name': "clean client plugins",
      'slavename': "i386-OSX-10.5",
      'builddir': "Clean_client_plugins",
      'factory': clean_client_plugins_factory,
      }


variables_window_factory = factory.BuildFactory();
variables_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/COXLAB/ClientPlugins/MonkeyWorksVariablesWindow", 
                                  mode=checkout_type))
variables_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
variables_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksVariablesWindow", "-configuration", "Debug"]))

variables_window_builder = {'name': "variables window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Variables_window",
      'factory': variables_window_factory,
      }


behavior_window_factory = factory.BuildFactory();
behavior_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/COXLAB/ClientPlugins/MonkeyWorksBehavioralWindowNew", 
                                  mode=checkout_type))
behavior_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
behavior_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksBehavioralWindow", "-configuration", "Debug"]))

behavior_window_builder = {'name': "behavior window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Behavior_window",
      'factory': behavior_window_factory,
      }


rat_behavior_window_factory = factory.BuildFactory();
rat_behavior_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/COXLAB/ClientPlugins/RatBehaviorControlPanelNew", 
                                  mode=checkout_type))
rat_behavior_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
rat_behavior_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "RatBehaviorControlPanel", "-configuration", "Debug"]))

rat_behavior_window_builder = {'name': "rat behavior window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Rat behavior_window",
      'factory': rat_behavior_window_factory,
      }


template_window_factory = factory.BuildFactory();
template_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabClientPlugins/DLabTemplateClientWindow", 
                                  mode=checkout_type))
template_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
template_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "DLabTemplateClientWindow", "-configuration", "Debug"]))

template_window_builder = {'name': "template window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Template_window",
      'factory': template_window_factory,
      }

calibrator_window_factory = factory.BuildFactory();
calibrator_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabClientPlugins/CalibratorWindow", 
                                  mode=checkout_type))
calibrator_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
calibrator_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "CalibratorWindow", "-configuration", "Debug"]))

calibrator_window_builder = {'name': "calibrator window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Calibrator_window",
      'factory': calibrator_window_factory,
      }

eye_window_factory = factory.BuildFactory();
eye_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabClientPlugins/EyeWindow", 
                                  mode=checkout_type))
eye_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
eye_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksEyeWindow", "-configuration", "Debug"]))

eye_window_builder = {'name': "eye window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Eye_window",
      'factory': eye_window_factory,
      }

MATLAB_window_factory = factory.BuildFactory();
MATLAB_window_factory.addStep(shell.ShellCommand(command=["ln", "-s", "/Applications/MATLAB_R2008a", "/Library/MonkeyWorks/Matlab/MATLAB"]))
MATLAB_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabClientPlugins/MATLABWindow", 
                                  mode=checkout_type))
MATLAB_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
MATLAB_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksMATLABWindow", "-configuration", "Debug"]))

MATLAB_window_builder = {'name': "MATLAB window",
      'slavename': "i386-OSX-10.5",
      'builddir': "MATLAB_window",
      'factory': MATLAB_window_factory,
      }

reward_window_factory = factory.BuildFactory();
reward_window_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/DLabClientPlugins/RewardWindow", 
                                  mode=checkout_type))
reward_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
reward_window_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "MonkeyWorksRewardWindow", "-configuration", "Debug"]))

reward_window_builder = {'name': "reward window",
      'slavename': "i386-OSX-10.5",
      'builddir': "Reward_window",
      'factory': reward_window_factory,
      }

data_file_indexer_factory = factory.BuildFactory();
data_file_indexer_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksTools/DataFileIndexer", 
                                  mode=checkout_type))
data_file_indexer_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
data_file_indexer_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
data_file_indexer_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "dfindexerUninstall", "-configuration", "Debug"]))
data_file_indexer_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "dfindex", "-configuration", "Debug"]))

data_file_indexer_builder = {'name': "data file indexer",
      'slavename': "i386-OSX-10.5",
      'builddir': "Data_file_indexer",
      'factory': data_file_indexer_factory,
      }

stream_utilities_factory = factory.BuildFactory();
stream_utilities_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksTools/MonkeyWorksStreamUtilities", 
                                  mode=checkout_type))
stream_utilities_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
stream_utilities_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
stream_utilities_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "UninstallMonkeyWorksStreamUtilities", "-configuration", "Debug"]))
stream_utilities_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "libMonkeyWorksStreamUtilities", "-configuration", "Debug"]))

stream_utilities_builder = {'name': "stream utilities",
      'slavename': "i386-OSX-10.5",
      'builddir': "Stream_utilities",
      'factory': stream_utilities_factory,
      }

MATLAB_data_reader_factory = factory.BuildFactory();
MATLAB_data_reader_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksTools/MatlabDataReader", 
                                  mode=checkout_type))
MATLAB_data_reader_factory.addStep(shell.ShellCommand(command=["make", "clean"]))
MATLAB_data_reader_factory.addStep(shell.ShellCommand(command=["make", "all"]))

MATLAB_data_reader_builder = {'name': "MATLAB data reader",
      'slavename': "i386-OSX-10.5",
      'builddir': "MATLAB_data_reader",
      'factory': MATLAB_data_reader_factory,
      }

MATLAB_data_reader_linux_factory = factory.BuildFactory();
MATLAB_data_reader_linux_factory.addStep(shell.ShellCommand(command=["rm", "-rf", "./*"], timeout=3600))
MATLAB_data_reader_linux_factory.addStep(shell.ShellCommand(command=["svn", "cleanup", "."], timeout=3600))
MATLAB_data_reader_linux_factory.addStep(shell.ShellCommand(command=["svn", "checkout", "https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk", "--username", "labuser", "--password", "labuser", "."], timeout=3600))
MATLAB_data_reader_linux_factory.addStep(shell.ShellCommand(command=["make", "-f", "Makefile.linux_analysis", "clean"]))
MATLAB_data_reader_linux_factory.addStep(shell.ShellCommand(command=["make", "-f", "Makefile.linux_analysis", "install"]))

MATLAB_data_reader_linux_builder = {'name': "MATLAB data reader: linux",
      'slavename': "a64-debian",
      'builddir': "MATLAB_data_reader_linux",
      'factory': MATLAB_data_reader_linux_factory,
      }

data_file_reader_factory = factory.BuildFactory();
data_file_reader_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksTools/DataFileReader", 
                                  mode=checkout_type))
data_file_reader_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Release"]))
data_file_reader_factory.addStep(shell.ShellCommand(command=["xcodebuild", "clean", "-alltargets", "-configuration", "Debug"]))
data_file_reader_factory.addStep(shell.ShellCommand(command=["xcodebuild", "build", "-target", "mwdfr", "-configuration", "Debug"]))

data_file_reader_builder = {'name': "data file reader",
      'slavename': "i386-OSX-10.5",
      'builddir': "Data_file_reader",
      'factory': data_file_reader_factory,
      }


installer_factory = factory.BuildFactory();
installer_factory.addStep(shell.ShellCommand(command=["chmod", "-R", "777", "MonkeyWorksInstall"],
                                                 descriptionDone=["cleaned"],
                                                 description=["cleaning"]))
installer_factory.addStep(shell.ShellCommand(command=["rm", "-rf", "MonkeyWorksInstall"],
                                                 descriptionDone=["cleaned"],
                                                 description=["cleaning"]))
installer_factory.addStep(source.SVN(svnurl="https://svn6.cvsdude.com/dicarlolab/MonkeyWorks/trunk/MonkeyWorksInstaller", 
                                  mode=checkout_type))
installer_factory.addStep(shell.ShellCommand(command=["rm", "-rf", "Archive/*"],
                                                 descriptionDone=["cleaned"],
                                                 description=["cleaning"]))
installer_factory.addStep(shell.ShellCommand(command=["./buildAllPackages.sh",  "NIGHTLY"],
                                                 descriptionDone=["built"],
                                                 description=["building"]))

installer_factory.addStep(shell.ShellCommand(command=["cp",  "-r", "Archive/MonkeyWorks-NIGHTLY.mpkg.zip", "/Library/WebServer/Documents/MonkeyWorks"],
                                                 descriptionDone=["copied"],
                                                 description=["copying"]))

installer_builder = {'name': "installer",
      'slavename': "i386-OSX-10.5",
      'builddir': "Installer",
      'factory': installer_factory,
      }





c['builders'] = [build_all_builder,
                 clean_monkeyworks_builder,
                 required_libs_builder, 
                 scarab_builder, 
                 core_builder,
                 cppunit_test_builder,
                 dlab_template_builder,
#                 jim1_builder,
                 itc18_builder,
                 fake_monkey_builder,
                 hid_builder,
                 mssw_builder,
                 rectangle_stimulus_builder,
                 circle_stimulus_builder,
                 drifting_grating_stimulus_builder,
                 movie_stimulus_builder,
                 experiment_xml_builder, 
                 marionette_test_prep_builder, 
                 marionette_tests_1_builder,
                 marionette_tests_2_builder,
                 cocoa_builder,
                 server_builder,
                 data_file_reader_builder,
                 data_file_indexer_builder,
                 stream_utilities_builder,
                 MATLAB_data_reader_builder,
                 MATLAB_data_reader_linux_builder,
                 client_builder,
                 clean_client_plugins_builder,
                 template_window_builder,
                 calibrator_window_builder,
                 variables_window_builder,
                 behavior_window_builder,
                 rat_behavior_window_builder,
                 eye_window_builder,
                 MATLAB_window_builder,
                 reward_window_builder,
                 editor_builder,
                 installer_builder]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8011, allowForce=True))

#from buildbot.status.mail import MailNotifier
#c['status'].append(MailNotifier(fromaddr="buildbot@localhost",
#                                extraRecipients=["bkennedy@mit.edu", "ben@andken.com"],
#                                sendToInterestedUsers=False,
#                                subject="%(builder)s is rebuilding MonkeyWorks",
#                                addLogs=True))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "MonkeyWorks"
c['projectURL'] = "http://dicarloserver2.mit.edu/MonkeyWorks"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dicarlo3.mit.edu:8011/"


